summation of frst n numbers
  
paremeterised way

#include <bits/stdc++.h>
using namespace std;
void func(int i,int sum)
{
    if(i<1)
    {
        cout<<sum<<"\n";
    return;
    }
    func(i-1,sum+i);
}
int main() {
    int n;
    cin>>n;
    func(n,0);
    return 0;
} 

functional way

#include <bits/stdc++.h>
using namespace std;
long long func(int n)
{
    long long sum=0;
    if(n==0)
     return 0;
    else
     return n+func(n-1);
}
int main() {
    int n;
    cin>>n;
    long long sum=func(n);
    cout<<sum<<"\n";
    return 0;
}


FactorIAL
but it works only upto 25

#include <bits/stdc++.h>
using namespace std;
long long fact(long long n)
{
    if(n==0||n==1)
      return 1;
    return n*fact(n-1);
}
int main() {
    int n;
    cin>>n;
    long long factorial=fact(n);
    cout<<factorial<<"\n";
    return 0;
}

Reverse the array using two pointer technique and recursion

#include <bits/stdc++.h>
using namespace std;
void revers(vector<int>&v,int l,int r){
  if(l>=r)
   return;
  swap(v[l],v[r]);
  revers(v,l+1,r-1);
}
int main() {
    int n,l,r;
    cin>>n;
    vector<int>v(n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    revers(v,l=0,r=n-1);
    for(int i=0;i<n;i++)
      cout<<v[i]<<" ";
    return 0;
}


checking palindrome or not
#include <bits/stdc++.h>
using namespace std;
bool palindrome(string s)
{
 int i=0;
 int n=s.length();
 if(s[i]!=s[n-i-1])
   return false;
 return true;

}
int main() {
	// your code goes here
	string s;
	cin>>s;
	bool k=palindrome(s);
	if(k)
	 cout<<"palindrome"<<"\n";
	else
	 cout<<"Not a palindrome"<<"\n";
	return 0;
}

checking palindrome or not using functional checking
#include <bits/stdc++.h>
using namespace std;
bool palindrome(string s,int i)
{
 int n=s.length();
 if(i>=n/2)
   return true;
 if(s[i]!=s[n-i-1])
   return false;
 palindrome(s,i+1);

}
int main() {
	// your code goes here
	string s;
	cin>>s;
	bool k=palindrome(s,0);
	if(k)
	 cout<<"palindrome"<<"\n";
	else
	 cout<<"Not a palindrome"<<"\n";
	return 0;
}
