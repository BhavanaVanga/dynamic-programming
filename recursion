nth fibonacci number
  it makes lots of recursion calls beyond n
#include <bits/stdc++.h>

using namespace std;
int nthfibonacci(int n)
{
    if(n<=1)
     return n;
    return nthfibonacci(n-1)+nthfibonacci(n-2);
}
int main() {
    int n;
    cin>>n;
    int m= nthfibonacci(n);
    cout<<m<<"\n";
    return 0;
}


print all subsequences

#include <bits/stdc++.h>

using namespace std;
void printAllSubsequences(vector<int>&v,vector<int>&a,int i,int n)
{   
    if(i==n)
    {
        for(int i=0;i<a.size();i++)
         cout<<a[i]<<" ";
        cout<<"\n";
        return;
    }
    a.push_back(v[i]);
    printAllSubsequences(v,a,i+1,n);
    a.pop_back();
    printAllSubsequences(v,a,i+1,n);
}
int main() {
    int n;
    cin>>n;
    vector<int>v(n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    vector<int>a;
    printAllSubsequences(v,a,0,n);
    return 0;
} 

output:
3 2 1 
3 2 
3 1 
3 
2 1 
2 
1 
{}

In reverse order printing

#include <bits/stdc++.h>

using namespace std;
void printAllSubsequences(vector<int>&v,vector<int>&a,int i,int n)
{  
    if(i==n)
    {
        for(int i=0;i<a.size();i++){
         cout<<a[i]<<" ";
        }
        if(a.size()==0)
         cout<<"{}";
        cout<<"\n";
        return;
    }
    printAllSubsequences(v,a,i+1,n);
    a.push_back(v[i]);
    printAllSubsequences(v,a,i+1,n);
    a.pop_back();
    
}
int main() {
    int n;
    cin>>n;
    vector<int>v(n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    vector<int>a;
    printAllSubsequences(v,a,0,n);
    return 0;
}
input:
3 
3 2 1
output:
{}
1 
2 
2 1 
3 
3 1 
3 2 
3 2 1 
